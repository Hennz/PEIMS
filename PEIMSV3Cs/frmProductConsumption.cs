/*
* ++++++++++++++++++++++++++++++++++++++++++++++++++
* This code is generated by a tool and is provided "as is", without warranty of any kind,
* express or implied, including but not limited to the warranties of merchantability,
* fitness for a particular purpose and non-infringement.
* In no event shall the authors or copyright holders be liable for any claim, damages or
* other liability, whether in an action of contract, tort or otherwise, arising from,
* out of or in connection with the software or the use or other dealings in the software.
* ++++++++++++++++++++++++++++++++++++++++++++++++++
* */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using MySql.Data.MySqlClient;

namespace PEIMSV3Cs
{
	public partial class frmproductconsumption : Form
	{
		private MySqlDataAdapter ad;
		
		public frmproductconsumption()
		{
			InitializeComponent();
		}
		
		private void frmproductconsumption_Load(object sender, EventArgs e)
		{
			string strConn = "server=localhost;user id=root;database=pharma;password=;";
			ad = new MySqlDataAdapter("select * from `productconsumption`", strConn);
			MySqlCommandBuilder builder = new MySqlCommandBuilder(ad);
			ad.Fill(this.newDataSet.productconsumption);
			ad.DeleteCommand = builder.GetDeleteCommand();
			ad.UpdateCommand = builder.GetUpdateCommand();
			ad.InsertCommand = builder.GetInsertCommand();
			MySqlDataAdapter ad3;
			
		}
		
		private void Save_Click(object sender, EventArgs e)
		{
			if (!this.Validate()) return;
			if( (( DataRowView )productconsumptionBindingSource.Current )[ "date" ] is DBNull )
			{
				((DataRowView)productconsumptionBindingSource.Current)["date"] = date_dateTimePicker.Value;
			}
			productconsumptionBindingSource.EndEdit();
			ad.Update(this.newDataSet.productconsumption);
            MessageBox.Show("Record Saved");
			
		}
		
		private void frmproductconsumption_FormClosing(object sender, FormClosingEventArgs e)
		{
			e.Cancel = false;
		}
		
		private void productIDTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( productIDTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( productIDTextBox, "The field productID is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( productIDTextBox, "" ); } 
		}
		
		private void locationIDTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( locationIDTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( locationIDTextBox, "The field locationID is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( locationIDTextBox, "" ); } 
		}
		
		private void itemSoldTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( itemSoldTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( itemSoldTextBox, "The field itemSold is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( itemSoldTextBox, "" ); } 
		}
		
		private void itemInStockTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( itemInStockTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( itemInStockTextBox, "The field itemInStock is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( itemInStockTextBox, "" ); } 
		}
		
		private void priceTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( priceTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( priceTextBox, "The field price is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( priceTextBox, "" ); } 
		}
		
		private void bindingNavigatorAddNewItem_Click(object sender, EventArgs e)
		{
			productconsumptionBindingSource.AddNew();
		}

        private void AddButton_Click(object sender, EventArgs e)
        {
            productconsumptionBindingSource.AddNew();
        }

        private void DeleteButton_Click(object sender, EventArgs e)
        {
            productconsumptionBindingSource.RemoveCurrent();
            MessageBox.Show("Save the changes!");
        }

        private void UpdateButton_Click(object sender, EventArgs e)
        {
            if (!this.Validate()) return;
            if (((DataRowView)productconsumptionBindingSource.Current)["date"] is DBNull)
            {
                ((DataRowView)productconsumptionBindingSource.Current)["date"] = date_dateTimePicker.Value;
            }
            productconsumptionBindingSource.EndEdit();
            ad.Update(this.newDataSet.productconsumption);
            MessageBox.Show("Record updated");
        }

        private void SaveButton_Click(object sender, EventArgs e)
        {
            if (!this.Validate()) return;
            if (((DataRowView)productconsumptionBindingSource.Current)["date"] is DBNull)
            {
                ((DataRowView)productconsumptionBindingSource.Current)["date"] = date_dateTimePicker.Value;
            }
            productconsumptionBindingSource.EndEdit();
            ad.Update(this.newDataSet.productconsumption);
            MessageBox.Show("Record saved");
        }

        private void ExitButton_Click(object sender, EventArgs e)
        {
            this.Hide();
        }
	}
}
