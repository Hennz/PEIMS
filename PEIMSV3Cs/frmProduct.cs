/*
* ++++++++++++++++++++++++++++++++++++++++++++++++++
* This code is generated by a tool and is provided "as is", without warranty of any kind,
* express or implied, including but not limited to the warranties of merchantability,
* fitness for a particular purpose and non-infringement.
* In no event shall the authors or copyright holders be liable for any claim, damages or
* other liability, whether in an action of contract, tort or otherwise, arising from,
* out of or in connection with the software or the use or other dealings in the software.
* ++++++++++++++++++++++++++++++++++++++++++++++++++
* */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using MySql.Data.MySqlClient;

namespace PEIMSV3Cs
{
	public partial class frmProduct : Form
	{
		private MySqlDataAdapter ad;
		
		public frmProduct()
		{
			InitializeComponent();
		}
		
		private void frmproduct_Load(object sender, EventArgs e)
		{
			string strConn = "server=localhost;user id=root;database=pharma;password=;";
			ad = new MySqlDataAdapter("select * from `product`", strConn);
			MySqlCommandBuilder builder = new MySqlCommandBuilder(ad);
			ad.Fill(this.newDataSet.product);
			ad.DeleteCommand = builder.GetDeleteCommand();
			ad.UpdateCommand = builder.GetUpdateCommand();
			ad.InsertCommand = builder.GetInsertCommand();
			MySqlDataAdapter ad3;
			
		}
		
		private void Save_Click(object sender, EventArgs e)
		{
			if (!this.Validate()) return;
			if( (( DataRowView )productBindingSource.Current )[ "manDate" ] is DBNull )
			{
				((DataRowView)productBindingSource.Current)["manDate"] = manDate_dateTimePicker.Value;
			}
			if( (( DataRowView )productBindingSource.Current )[ "expDate" ] is DBNull )
			{
				((DataRowView)productBindingSource.Current)["expDate"] = expDate_dateTimePicker.Value;
			}
			productBindingSource.EndEdit();
			ad.Update(this.newDataSet.product);
            MessageBox.Show("Record saved");
			
		}
		
		private void frmproduct_FormClosing(object sender, FormClosingEventArgs e)
		{
			e.Cancel = false;
		}
		
		private void productIDTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( productIDTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( productIDTextBox, "The field productID is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( productIDTextBox, "" ); } 
		}
		
		private void nameTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( nameTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( nameTextBox, "The field name is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( nameTextBox, "" ); } 
		}
		
		private void locationIDTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( locationIDTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( locationIDTextBox, "The field locationID is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( locationIDTextBox, "" ); } 
		}
		
		private void batchNoTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( batchNoTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( batchNoTextBox, "The field batchNo is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( batchNoTextBox, "" ); } 
		}
		
		private void priceTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( priceTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( priceTextBox, "The field price is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( priceTextBox, "" ); } 
		}
		
		private void rfidTagIDTextBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
			if( string.IsNullOrEmpty( rfidTagIDTextBox.Text ) )
			{
				e.Cancel = true;
				errorProvider1.SetError( rfidTagIDTextBox, "The field rfidTagID is required" ); 
			}
			if( !e.Cancel ) { errorProvider1.SetError( rfidTagIDTextBox, "" ); } 
		}

        private void qrCodePictureBox_Validating(object sender, CancelEventArgs e)
		{
			e.Cancel = false;
            if (string.IsNullOrEmpty(qrCodePictureBox.Text))
			{
				e.Cancel = true;
                errorProvider1.SetError(qrCodePictureBox, "The field qrCode is required"); 
			}
            if (!e.Cancel) { errorProvider1.SetError(qrCodePictureBox, ""); } 
		}
		
		
		
		
		private void bindingNavigatorAddNewItem_Click(object sender, EventArgs e)
		{
			productBindingSource.AddNew();
		}

        private void LoadImageButton_Click(object sender, EventArgs e)
        {
            OpenFileDialog dlg = new OpenFileDialog();
            //dlg = "JPG Files(*.jpg)|*.jpg|PNG Files(*.png)|*.png|All Files(*.*)|*.*";


            if (dlg.ShowDialog() == DialogResult.OK)
            {
                string picPath = dlg.FileName.ToString();
                textBoxImagePath.Text = picPath;
                qrCodePictureBox.ImageLocation = picPath;
            }
        }

        private void ExitButton_Click(object sender, EventArgs e)
        {
            this.Hide();
        }

        private void AddButton_Click(object sender, EventArgs e)
        {
            productBindingSource.AddNew();
        }

        private void DeleteButton_Click(object sender, EventArgs e)
        {
            productBindingSource.RemoveCurrent();
            MessageBox.Show("Save the changes");
        }

        private void UpdateButton_Click(object sender, EventArgs e)
        {
            if (!this.Validate()) return;
            if (((DataRowView)productBindingSource.Current)["manDate"] is DBNull)
            {
                ((DataRowView)productBindingSource.Current)["manDate"] = manDate_dateTimePicker.Value;
            }
            if (((DataRowView)productBindingSource.Current)["expDate"] is DBNull)
            {
                ((DataRowView)productBindingSource.Current)["expDate"] = expDate_dateTimePicker.Value;
            }
            productBindingSource.EndEdit();
            ad.Update(this.newDataSet.product);
            MessageBox.Show("Record updated");
        }

        private void SaveButton_Click(object sender, EventArgs e)
        {
            if (!this.Validate()) return;
            if (((DataRowView)productBindingSource.Current)["manDate"] is DBNull)
            {
                ((DataRowView)productBindingSource.Current)["manDate"] = manDate_dateTimePicker.Value;
            }
            if (((DataRowView)productBindingSource.Current)["expDate"] is DBNull)
            {
                ((DataRowView)productBindingSource.Current)["expDate"] = expDate_dateTimePicker.Value;
            }
            productBindingSource.EndEdit();
            ad.Update(this.newDataSet.product);
            MessageBox.Show("Record saved");
        }
	}
}
